<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>TrackNGo</title>

  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />

  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/style.css" />
  <style>
    #map {
      height: 100vh;
      width: 100%;
    }
  </style>
</head>
<body>
  <div id="map"></div>

  <!-- Scripts -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>

  <script>
    const socket = io();
    const map = L.map('map').setView([28.2380, 83.9956], 13);

    // Tile layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Custom icons
    const busIcon = L.icon({
      iconUrl: "/img/bus.png",
      iconSize: [70, 70],
      iconAnchor: [35, 70],
      popupAnchor: [0, -70]
    });

    const sourceIcon = L.icon({
      iconUrl: "https://cdn-icons-png.flaticon.com/512/684/684908.png", // location pin
      iconSize: [35, 35],
      iconAnchor: [17, 35]
    });

    const destIcon = L.icon({
      iconUrl: "https://cdn-icons-png.flaticon.com/512/447/447031.png", // flag icon
      iconSize: [35, 35],
      iconAnchor: [17, 35]
    });

    // Track all bus markers
    const markers = {};
    let routingControl = null;
    let sourceMarker = null;
    let destMarker = null;

    // Draw route with source and destination markers
    map.on('click', function (e) {
      const destination = L.latLng(e.latlng.lat, e.latlng.lng);
      const busIds = Object.keys(markers);

      if (busIds.length === 0) return;

      const busLatLng = markers[busIds[0]].getLatLng();

      // Remove previous route and markers
      if (routingControl) map.removeControl(routingControl);
      if (sourceMarker) map.removeLayer(sourceMarker);
      if (destMarker) map.removeLayer(destMarker);

      // Add source and destination markers
      sourceMarker = L.marker(busLatLng, { icon: sourceIcon }).addTo(map).bindPopup("Bus Location").openPopup();
      destMarker = L.marker(destination, { icon: destIcon }).addTo(map).bindPopup("Destination").openPopup();

      // Draw route
      routingControl = L.Routing.control({
        waypoints: [busLatLng, destination],
        createMarker: () => null, // Disable default markers
        addWaypoints: false,
        draggableWaypoints: false,
        routeWhileDragging: false,
        show: false
      }).addTo(map);
    });

    // Handle real-time bus updates
    socket.on("receive-location", (data) => {
      const { id, latitude, longitude } = data;
      const latlng = [latitude, longitude];

      if (markers[id]) {
        markers[id].setLatLng(latlng);
      } else {
        markers[id] = L.marker(latlng, { icon: busIcon }).addTo(map).bindPopup("Bus");
      }

      // Optionally center map
      map.setView(latlng, map.getZoom());
    });

    socket.on("user-disconnected", (id) => {
      if (markers[id]) {
        map.removeLayer(markers[id]);
        delete markers[id];
      }
    });

    // Send user's location to server
    if (navigator.geolocation) {
      navigator.geolocation.watchPosition((position) => {
        const { latitude, longitude } = position.coords;
        socket.emit("send-location", { latitude, longitude });
      });
    }
  </script>
</body>
</html>
